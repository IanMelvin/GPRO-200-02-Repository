#version 300 es

//Object-space
layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;

//2D UV: texture coord
//Texture space
layout (location = 2) in vec4 aTexcoord;

//Transform uniforms
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;

//Light Uniforms
uniform vec4 LightPosition;
uniform vec3 DiffuseReflectivity;
uniform vec3 LightIntensity;

//Varying
out vec4 vColor;
out vec4 vPos;
out vec4 vNormal;
out vec4 vTexcoord;

vec3 lightIng()
{
	return vec3(1.0);
}

void main()
{	
	//Based on pg.52 of David Wolff's OpenGL 4.0 Shading Language Cookbook
	//https://people.inf.elte.hu/plisaai/pdf/David%20Wolff%20-%20OpenGL%204.0%20Shading%20Language%20Cookbook%20(2).pdf
	mat4 modelViewMat = uViewMat * uModelMat;
	
	//View-Space
	//mat3 normalMat = transpose(inverse(mat3(modelViewMat)));
	//vec3 norm_cam = normalMat * aNormal;
	//vec4 lightView = modelViewMat * LightPosition;
	//vec4 eyeCoord = modelViewMat * aPosition;
	
	//Object-space
	vec3 norm_cam = aNormal;
	vec4 lightView = LightPosition;
	vec4 eyeCoord = aPosition;
	
	vec3 normDist = normalize(vec3(lightView-eyeCoord));
	vec3 preColor = LightIntensity * DiffuseReflectivity * max(dot(normDist, norm_cam), 0.0);
	
	//Per-vertex
	vColor = vec4(preColor, 1.0);
	
	//Per-fragment
	//vColor = vec4(normDist, 0.0);
	//vNormal = vec4(norm_cam, 0.0);
	
	gl_Position = uViewProjMat * uModelMat * aPosition;
}