#version 300 es

//Object-space
layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;

//2D UV: texture coord
//Texture space
layout (location = 2) in vec4 aTexcoord;

//Transform uniforms
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;

//Light uniforms
uniform vec4 LightPosition;
uniform float LightIntensity;
uniform vec3 LightColor;

//Varying 
out vec4 vColor;
out vec4 vPos;
out vec4 vNormal;
out vec4 vTexcoord;

void main()
{	
	mat4 modelViewMat = uViewMat * uModelMat;
	vec4 pos_clip = uProjMat * modelViewMat * aPosition;
	
	vec4 eyeCoord = modelViewMat * aPosition;
	
	//Per Vertex
	vec3 lVector = normalize(vec3(LightPosition - eyeCoord));
	
	float attenuation = LightIntensity / ( dot((eyeCoord.xyz-lVector),(eyeCoord.xyz-lVector)) + 1.0);
	
	vec3 preColor = LightColor * vec3(0.5, 0.4, 0.9) * attenuation * max(dot(lVector, pos_clip.xyz), 0.0);
	//vColor = vec4(preColor, 1.0);
	
	//Per Fragment
	vColor = eyeCoord;
	vPos = pos_clip;
	
	gl_Position = uViewProjMat * uModelMat * aPosition;
}