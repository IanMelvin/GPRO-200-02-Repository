#version 300 es

//Object-space
layout (location = 0) in vec4 aPosition;
layout (location = 1) in vec3 aNormal;

//2D UV: texture coord
//Texture space
layout (location = 2) in vec4 aTexcoord;

//Transform uniforms
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;

//Varying 
out vec4 vColor;
out vec4 vNormal;
out vec4 vTexcoord;

void main()
{
	//vec4 pos_world = uModelMat * aPosition;
	//vec4 pos_clip = uViewProjMat * pos_world;
	//gl_Position = pos_clip;
	
	//Position pipeline
	mat4 modelViewMat = uViewMat * uModelMat;
	vec4 pos_camera = modelViewMat * aPosition;
	vec4 pos_clip2 = uProjMat * pos_camera;
	
	gl_Position = pos_clip2;
	
	//Normal pipeline
	mat3 normalMat = transpose(inverse(mat3(modelViewMat)));
	vec3 norm_camera = normalMat * aNormal;
	
	// Texcoord pipeline
	mat4 atlasMat = mat4(1.0, 0.0, 0.0, 0.0,
						 0.0, 1.0, 0.0, 0.0,
						 0.0, 0.0, 1.0, 0.0,
						 0.25, 0.25, 0.0, 1.0);
	vec4 uv_atlas = atlasMat * aTexcoord;
	
	//Per-vertex: calc and output final color
	vColor = vec4(aNormal * 0.5 + 0.5, 1.0);
	
	//Per-fragment: pass needed values to PS
	vNormal = vec4(norm_camera, 0.0);
	
	vTexcoord = uv_atlas;
	
	gl_Position = uProjMat * modelViewMat * aTexcoord;
	//vColor = vec4(1.0, 0.5, 0.0, 1.0);
	//vColor = aPosition;
}