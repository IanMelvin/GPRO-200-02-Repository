#version 330 core
//Billboarding Pass
//Ian Melvin
//Based of work done at http://www.geeks3d.com/20140815/particle-billboarding-with-the-geometry-shader-glsl/

layout (points) in;
layout (triangle_strip) out;
layout (max_vertices = 4) out;

//Uniforms
uniform mat4 uProjection;
uniform mat4 uViewProjMat;
uniform mat4 uModel;
uniform mat4 uView;
uniform float uParticleSize;

//Varying
in VERTEX
{
	vec4 vColor;
} vertex[];

out vec2 vertex_UV;
out vec4 vertex_Color;

//Calculates the values for each vertex in the Primitive
void main()
{
	mat4 MV = uView * uModel;
	
	vec3 right = vec3(MV[0][0], MV[1][0], MV[2][0]);
	vec3 up = vec3(MV[0][1], MV[1][1], MV[2][1]);

	vec3 p = gl_in[0].gl_Position.xyz;
	
	// a: left-bottom
	vec3 va = p - (right + up) * uParticleSize;
	gl_Position = uViewProjMat * vec4(va, 1.0);
	vertex_UV = vec2(0.0, 0.0);
	vertex_Color = vertex[0].vColor;
	EmitVertex();
	
	// b: left-top
	vec3 vb = p - (right - up) * uParticleSize;
	gl_Position = uViewProjMat * vec4(vb, 1.0);
	vertex_UV = vec2(0.0, 1.0);
	vertex_Color = vertex[0].vColor;
	EmitVertex();
	
	// d: right-bottom
	vec3 vd = p + (right - up) * uParticleSize;
	gl_Position = uViewProjMat * vec4(vd, 1.0);
	vertex_UV = vec2(1.0, 0.0);
	vertex_Color = vertex[0].vColor;
	EmitVertex();
	
	// c: right-top
	vec3 vc = p + (right + up) * uParticleSize;
	gl_Position = uViewProjMat * vec4(vc, 1.0);
	vertex_UV = vec2(1.0, 1.0);
	vertex_Color = vertex[0].vColor;
	EmitVertex();
	
	EndPrimitive();
	
}