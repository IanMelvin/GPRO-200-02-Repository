/*
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{   
    // Normalized pixel coordinates (from 0 to 1)
    //vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    //fragColor = vec4(col,1.0);
    
    if (__VERSION__ == 300)
        fragColor = vec4(1.0);
}
*/

/* Behind the scenes stuff
#version 300 es

//inputs (later)
//uniforms (see above)

//output
layout (location = 0) out vec4 rtFragColor; (rt = render target)

// shadertoy
void mainImage(out vec4 fragColor, in vec2 fragCoord);

void main()
{
	//shadertoy
	mainImage(rtFragColor, gl_FragCoord.xy);
}

*/

// Efficency Tips
    
    /*float a = fragCoord.x + 2.0;	//3.0: parallel
    
    float b = a >= 0.0 ? +a : -a;
    
    if(a < 50.0) //parallel
    {
		//do stuff
    }
    else 
    {
        //do stuff
    }
    
    vec4 result = vec4(0.0);
    int numberSamples = 8;
    int i = numberSamples;
    //for (int i = 0; i < numSamples; i++)
    //for(i = 0; i < numSamples; ++i)
    //for(i = numSamples; i >= 0; --i)
    //{
	//	results += vec4(float(i));
    //}
    result += add(--i);
    result += add(--i);
    result += add(--i);
    result += add(--i);
    result += add(--i);
    result += add(--i);
    result += add(--i);
    result += add(--i);
    
    // ***Examples***
    //float aSq = a * a; // pow(a, 2.0); manualy calc if you can
    //float aCu = aSq * a; 
    //a *= a; //square a
    //a *= a; // original ^4
    //how do I make it look prettier?
    a = pow64(a);
    
   float len2 = lengthSquared(rayDirection);
    		//dot(rayDirection, rayDirection);	
    			//rayDirection.x * rayDirection.x
   //    		+rayDirection.y * rayDirection.y 
   //    		+rayDirection.z * rayDirection.z;//...
       //length(rayDirection) * length(rayDirection);
    
    //vec2 s = vec2(rayDirection.x, rayDirection.y);
	//vec2 s = rayDirection.xy;
    vec2 s = rayDirection.yx; //swizzling
    
    // more swizzling
    vec3 s3 = rayDirection.zzx; //with dups : not writable
    rayDirection.yzx = vec3(1.0, 2.0, 3.0);
    rayDirection.yxz = rayDirection.zxy;
    vec4 s4 = leng2.xxxx;*/

//dummy function
/*vec4 add(in int index)
{
    //do stuff
    //
    //
    //
	return vec4(float(index));
}

float pow64(float x)
{
 	x*=x;
    x*=x;
    x*=x;
    x*=x;
    x*=x;
    x*=x;
    return x;
    
}

float lengthSquared(in vec2 x)
{
    return dot(x,x);
}
float lengthSquared(in vec3 x)
{
    return dot(x,x);
}
float lengthSquared(in vec4 x)
{
    return dot(x,x);
}*/