/*
	Ian Melvin
	Midterm
	File: Common
	Purpose: Using Lab 3 as a base, implement chapters 8, 9, and 12 of Peter Shirley's Ray Tracing in one weekend
		https://raytracing.github.io/books/RayTracingInOneWeekend.html#rays,asimplecamera,andbackground

*/

//------------------------------------------------------------
// struct declarations and assoicated functions

//Declaration of struct
//inspired on hit_record from Peter Shirley (Link in header)
struct hit_record{
  	vec3 point;
    vec3 normal;
    float temp;
    bool front_face;
};

//Declaration of struct
//inspired on sphere class from Peter Shirley (Link in header)
struct sphere{
	vec3 center;
    float radius;
};

//Declaration of struct
//inspired on camera class from Peter Shirley (Link in header)
struct camera{
    vec3 horizontal;
    vec3 vertical;
    vec3 lower_left_corner;
};
    
//takes in two vec4, a vec3 and a hit_record and outs a modified hit_record
//based on work by Peter Shirley (Link in header)
void set_face_normal(vec4 rayDirection, vec4 rayOrigin, vec3 outward_normal, out hit_record rec)
{
    rec.front_face = dot(rayDirection.xyz, outward_normal) < 0.0;
    if(rec.front_face)
    {
        rec.normal = outward_normal;
    }
    else 
    {
     	rec.normal = -outward_normal;   
    }    
    
}

//takes in a camera, a vec4, and 3 floats and outs a modified camera
//based on work by Peter Shirley (Link in header)
void set_cam(out camera cam, vec4 origin, float viewportWidth, float viewportHeight, float focal_length)
{
 	cam.horizontal = vec3(viewportWidth, 0.0, 0.0);
    cam.vertical = vec3(0.0, viewportHeight, 0.0);
    cam.lower_left_corner = origin.xyz - cam.horizontal/2.0 - cam.vertical/2.0 - vec3(0.0, 0.0, focal_length);
    
}

//------------------------------------------------------------
// Helper Functions

//Takes in a vec4 and returns the vector divided by its length
vec4 unit_vector(in vec4 vector)
{
 	   return vector / length(vector);
}

//Takes in a vec3 and returns the vector divided by its length
vec3 unit_vector(in vec3 vector)
{
 	   return vector / length(vector);
}

//Provided by Dan Buckstein during class
//preforms the dot product on a vec3
float lengthSquared(in vec3 x)
{
    return dot(x,x);
}

//Provided by Dan Buckstein during class
//preforms the dot product on a vec4
float lengthSquared(in vec4 x)
{
    return dot(x,x);
}


// Provided by DANIEL S. BUCKSTEIN

// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
vec4 asPoint(in vec3 v)
{
    return vec4(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
vec4 asVector(in vec3 v)
{
    return vec4(v, 0.0);
}

//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    vec4 viewportPoint;
	vec2 pixelCoord;
	vec2 resolution;
	vec2 resolutionInv;
	vec2 size;
	vec2 ndc;
	vec2 uv;
	float aspectRatio;
	float focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = vec2(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(vec3(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    vec4 origin;
    vec4 direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in vec3 eyePosition, in vec3 viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + vec3(viewport.xy, 0.0), viewport);
}
