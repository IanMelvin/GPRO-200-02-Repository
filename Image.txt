/*
	Ian Melvin
	Midterm
	File: Image
	Purpose: Using Lab 3 as a base, implement chapters 8, 9, and 12 of Peter Shirley's Ray Tracing in one weekend
		https://raytracing.github.io/books/RayTracingInOneWeekend.html#rays,asimplecamera,andbackground

*/

// Provided by Dan Buckstein
// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// Provided by Dan Buckstein
// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}



//Takes in a vec3, two vec4s, three floats, and a hit_record and returns a boolean and outs a hit_record
//Determines if a sphere is hit
//based on work by Peter Shirley (Link in header)
bool hit(sphere spr, vec4 rayDirection, vec4 rayOrigin, float t_max, float t_min, out hit_record rec)
{
	vec3 originToCenter =  rayOrigin.xyz - spr.center;
    float len2 = lengthSquared(rayDirection);
    float component = dot(originToCenter, rayDirection.xyz);
    float ocMinusRadSqred = lengthSquared(originToCenter) - spr.radius*spr.radius;
    float discriminant = component*component - len2*ocMinusRadSqred;
    if(discriminant > 0.0)
    {
        float root = sqrt(discriminant);
        	
        float temp = (-component - root) / len2;
         
        if(temp < t_max && temp > t_min)
        {
         	rec.temp = temp;
            rec.point = rayOrigin.xyz + ( rec.temp * rayDirection.xyz );
            vec3 outward_normal = (rec.point - spr.center) / spr.radius;
            set_face_normal(rayDirection, rayOrigin, outward_normal, rec);
            rec.material = spr.material;
            
            return true;
        }
        
        temp = (-component + root) / len2;
        if(temp < t_max && temp > t_min)
        {
         	rec.temp = temp;
            rec.point = rayOrigin.xyz + ( rec.temp * rayDirection.xyz );
            vec3 outward_normal = (rec.point - spr.center) / spr.radius;
            set_face_normal(rayDirection, rayOrigin, outward_normal, rec);
            rec.material = spr.material;
            
            return true;
        }
    }
    
    return false;
    
}

//Takes in two vec4s, two floats and a sphere. Returns a bool, and outs a hit_record and a float
//based on work by Peter Shirley (Link in header)
bool hittable(vec4 rayDirection, vec4 rayOrigin, out float t_max, float t_min, out hit_record rec, sphere spr)
{
    hit_record temp_rec;
    bool hit_anything = false; 
    
    if(hit(spr, rayDirection, rayOrigin, t_max, t_min, temp_rec))
    {
      	hit_anything = true;
        t_max = temp_rec.temp;
        rec = temp_rec;
    }
    
    return hit_anything;
}

//Based of of code given by https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
float randomFloat(vec2 seed)
{
    return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

float randomFloat(float minimun, float maximun, vec2 seed)
{
    return minimun + (maximun - minimun)*randomFloat(seed);
}

//Takes in a light, three vec4s, a vec3, a float, and returns a vec4
//Implementation of Lambertian Reflection
//Brought over from Lab 4
vec4 reflections(in lLight light, in vec4 rayDirection, in vec4 rayOrigin, in vec3 normal, in vec4 color, in float highexp)
{
 	//Lambertian reflection
    // Diffuse Coefficient
    vec3 lVector = normalizer(light.center.xyz - rayDirection.xyz);
   	float diffuseCoeff = maxDotProd(normal, lVector);
        
    // Attenuation  
    // based on https://f.usemind.org/files/b/1/UseMind.ORG_comprehensive-tutorial-and-reference_2015__.pdf, Listing 13.30
    float attenuation = light.intensity / (lengthSquared(rayDirection.xyz - lVector) + 1.0);
        
    // Diffuse intencity
    vec4 diffuseIntencity = diffuseCoeff * color * light.color * attenuation;
	
    return diffuseIntencity * color * light.color;
}

bool scatterMetal(vec4 rayDirection, vec4 rayOrigin, vec4 color, hit_record rec)
{
    vec3 reflected = reflect(unit_vector(rayDirection.xyz), rec.normal);
    
    return true;
}

// Base Function by Dan Buckstein
// Modified by Ian Melvin based on work by Peter Shirley (Link in header)
// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin, in sphere sphereArray[2], vec2 uv, vec2 fragCoord)
{
    hit_record rec;
    float t_max = 1.0 / 0.0; 
    
    bool store = hittable(rayDirection, rayOrigin, t_max, 0.0, rec, sphereArray[0]);
    bool store2 = hittable(rayDirection, rayOrigin, t_max, 0.0, rec, sphereArray[1]);
    
    //light
    lLight light, light2, light3, light4;
    initLight(light, vec3(0.0, 0.0, 300.0), vec4(1.0, 1.0, 1.0, 1.0), 10.0);
    //initLight(light2, vec3(-200.0, 500.0, 150.0), vec4(0.5, 0.1, 0.2, 1.0), 10.0);
    //initLight(light3, vec3(0.0, -50.0, 0.0), vec4(0.1, 0.8, 0.6, 1.0), 3.0);
    //initLight(light4, vec3(-200.0, -200.0, -300.0), vec4(0.7, 0.3, 0.9, 1.0), 2.0);
    
    if(store)
    {
        vec4 color = 0.5 *(vec4(rec.normal, 1.0) + vec4(1.0));
        
        vec4 refColor = reflections(light, rayDirection, rayOrigin, rec.normal, color, 64.0);
        //refColor += reflections(light2, rayDirection, rayOrigin, rec.normal, color, 24.0);
        //refColor += reflections(light3, rayDirection, rayOrigin, rec.normal, color, 4.0);
        //refColor += reflections(light4, rayDirection, rayOrigin, rec.normal, color, 128.0);
        return 0.1*vec4(0.8, 0.4, 0.2, 1.0) + refColor;
         
    }
    else if(store2)
    {
     	return 0.5 *(vec4(rec.normal, 1.0) + vec4(1.0));  
    }
    
    //vec4 unitDirection = unit_vector(rayDirection);
    
    //float hit = 0.5 * (unitDirection.y + 1.0);
    
    return texture(iChannel0, uv);
}

// Provided by Dan Buckstein
// Modified by Ian Melvin based on work by Peter Shirley (Link in header)
// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;
    
    camera cam;
    
    //Antialiasing
    const float samples_per_pixel = 100.0;
    
    //sphere info
    sphere spr1;
    sphere spr2;
    
    spr1.center = vec3(0.0, 0.0, -1.0);
    spr2.center = vec3(0.0, -100.5, -1.0);
    
    spr1.radius = 0.5;
    spr2.radius = 100.0;
    
    spr1.material = true;
    spr2.material = false;
    
	//sphere array
    sphere sphereArray[2] = sphere[2](spr1, spr2);

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);
    
   	set_cam(cam, rayOrigin, aspect*viewportHeight, viewportHeight, focalLength);
    
    //declare vector 3
    vec4 mixed;
	
    //loop to collect 
    for(float i = 0.0; i < samples_per_pixel; i++)
    {
        float u = (fragCoord.x + randomFloat(fragCoord)) / ((viewportHeight * aspect) - 1.0);
        float v = (fragCoord.x + randomFloat(fragCoord)) / (viewportHeight - 1.0);
        rayDirection = vec4(cam.lower_left_corner + u * cam.horizontal + v * cam.vertical, 0.0) - rayOrigin;
        calcRay(rayDirection, rayOrigin, viewport, focalLength);
        
        mixed += calcColor(rayDirection, rayOrigin, sphereArray, uv, fragCoord);
        
    }
    
    float scale = 1.0 / samples_per_pixel;
    
    mixed.x = clamp(mixed.x *= scale, 0.0, 0.999);
    mixed.y = clamp(mixed.y *= scale, 0.0, 0.999);
	mixed.z = clamp(mixed.z *= scale, 0.0, 0.999);

    // color
    fragColor = mixed;
}