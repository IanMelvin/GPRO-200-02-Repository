/*
	Ian Melvin
	Midterm
	File: Image
	Purpose: Using Lab 3 as a base, implement chapters 8, 9, and 12 of Peter Shirley's Ray Tracing in one weekend
		https://raytracing.github.io/books/RayTracingInOneWeekend.html#rays,asimplecamera,andbackground

*/

// Provided by Dan Buckstein
// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// Provided by Dan Buckstein
// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out rRay ray,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}

//Takes in a vec3, two vec4s, three floats, and a hit_record and returns a boolean and outs a hit_record
//Determines if a sphere is hit
//based on work by Peter Shirley (Link in header)
bool hit(sphere spr, rRay ray, float t_max, float t_min, out hit_record rec)
{
	vec3 originToCenter =  ray.rayOrigin.xyz - spr.center;
    float len2 = lengthSquared(ray.rayDirection);
    float component = dot(originToCenter, ray.rayDirection.xyz);
    float ocMinusRadSqred = lengthSquared(originToCenter) - spr.radius*spr.radius;
    float discriminant = component*component - len2*ocMinusRadSqred;
    if(discriminant > 0.0)
    {
        float root = sqrt(discriminant);
        	
        float temp = (-component - root) / len2;
         
        if(temp < t_max && temp > t_min)
        {
         	rec.temp = temp;
            rec.point = ray.rayOrigin.xyz + ( rec.temp * ray.rayDirection.xyz );
            vec3 outward_normal = (rec.point - spr.center) / spr.radius;
            set_face_normal(ray, outward_normal, rec);
            rec.material = spr.material.mat;
            rec.color = spr.material.color;
            rec.fuzz = spr.material.fuzz;
            
            return true;
        }
        
        temp = (-component + root) / len2;
        if(temp < t_max && temp > t_min)
        {
         	rec.temp = temp;
            rec.point = ray.rayOrigin.xyz + ( rec.temp * ray.rayDirection.xyz );
            vec3 outward_normal = (rec.point - spr.center) / spr.radius;
            set_face_normal(ray, outward_normal, rec);
            rec.material = spr.material.mat;
            rec.fuzz = spr.material.fuzz;
            
            return true;
        }
    }
    
    return false;
    
}

//Takes in two vec4s, two floats and a sphere. Returns a bool, and outs a hit_record and a float
//based on work by Peter Shirley (Link in header)
bool hittable(rRay ray, out float t_max, float t_min, out hit_record rec, sphere sphereArray[4])
{
    hit_record temp_rec;
    bool hit_anything = false; 
    
    for(int i = 0; i < 4; i++)
    {
        if(hit(sphereArray[i], ray, t_max, t_min, temp_rec))
    	{
      		hit_anything = true;
        	t_max = temp_rec.temp;
        	rec = temp_rec;
    	}
    }
   
    return hit_anything;
}

bool scatterMetal(rRay ray, out vec4 color, hit_record rec, out rRay scattered, vec2 fragCoord)
{
    vec3 reflected = reflect(unit_vector(ray.rayDirection.xyz), rec.normal);
    scattered.rayOrigin = vec4(rec.point, 0.0);
    scattered.rayDirection = vec4(reflected + (rec.fuzz * random_in_unit_sphere(fragCoord)), 0.0);
    color = rec.color;
    return (dot(scattered.rayDirection, vec4(rec.normal, 0.0)) > 0.0);
}

bool scatterLam(rRay ray, out vec4 color, hit_record rec, out rRay scattered, vec2 fragCoord)
{
    vec3 scattered_direction = rec.normal + random_unit_vector(fragCoord);
    scattered.rayOrigin = vec4(rec.point, 1.0);
    scattered.rayDirection = vec4(scattered_direction, 1.0);
    color = rec.color;
    return true;
}

vec4 colorValue(out rRay ray, sphere sphereArray[4], out bool again, vec2 uv, out int depth, hit_record rec, vec2 fragCoord)
{
    float t_max = 1.0 / 0.0;
    again = false;
    depth--;
    
    if(depth <= 0)
    {
    	return vec4(0.0, 0.0, 0.0, 1.0);
    }
    
    else if (hittable(ray, t_max, 0.001, rec, sphereArray))
    {
        rRay scattered = ray;
    	vec4 attenuation, mutliatten = vec4(1.0);
        if(rec.material == 1.0)
        {
            if(scatterLam(ray, attenuation, rec, scattered, fragCoord))
            {
                ray = scattered;
            	again = true;
                return attenuation;   
            }
            return vec4(0.0, 0.0, 0.0, 0.0);
        }
        else if(rec.material == 2.0)
        {
            if(scatterMetal(ray, attenuation, rec, scattered, fragCoord))
            {
                ray = scattered;
                again = true;
            	return attenuation;   
            }
            return vec4(0.0, 0.0, 0.0, 0.0);
        }
    }
    
    //return texture(iChannel0, uv);
    vec4 unitDirection = unit_vector(ray.rayDirection);
    
    float hit = 0.5 * (unitDirection.y + 1.0);
    
    return mix(vec4(1.0), vec4(0.5, 0.7, 1.0, 1.0), hit);   
    
}

// Base Function by Dan Buckstein
// Modified by Ian Melvin based on work by Peter Shirley (Link in header)
// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(rRay ray, sphere sphereArray[4], vec2 uv, vec2 fragCoord)
{
    hit_record rec;
    int depth = 50;
    bool loop = true;
    
    vec4 store = colorValue(ray, sphereArray, loop,  uv, depth, rec, fragCoord);
    
    while(loop)
    {
    	store *= colorValue(ray, sphereArray, loop,  uv, depth, rec, fragCoord);
    }
    
    return store;
}

//takes in a camera, a vec4, and 3 floats and outs a modified camera
//based on work by Peter Shirley (Link in header)
void set_cam(out camera cam, vec4 origin, vec3 focusOn, vec3 vup, float vfov, float aRatio, float focusDist)
{
    float theta = dToRadians(vfov);
    float viewportHeight = 2.0 * tan(theta * 0.5);
    float viewportWidth = aRatio * viewportHeight;
    
    vec3 w = unit_vector(origin.xyz - focusOn);
    cam.u = unit_vector(cross(vup, w));
    cam.v = cross(w,cam.u);
    
    cam.origin = origin;
 	cam.horizontal = focusDist * viewportWidth * cam.u;
    cam.vertical = focusDist * viewportHeight * cam.v;
    cam.lower_left_corner = origin.xyz - cam.horizontal * 0.5 - cam.vertical * 0.5 - focusDist * w;
}

vec3 randomUnitDisk(vec2 fragCoord)
{
	while(true)
    {
     	vec3 point = vec3(randomFloat(-1.0, 1.0, fragCoord), randomFloat(-1.0, 1.0, fragCoord), 0.0);
        if(lengthSquared(point) >= 1.0) continue;
        return point;
    }
}

rRay getRay(camera cam, float u, float v, float aperture, vec2 fragCoord)
{
    vec3 rd = aperture * 0.5 * randomUnitDisk(fragCoord);
    vec3 offset = cam.u * rd.x + v * rd.y;
    
    rRay ray;
    ray.rayOrigin = cam.origin + vec4(offset, 1.0);
    ray.rayDirection = vec4(cam.lower_left_corner + u * cam.horizontal + v * cam.vertical, 1.0) - cam.origin + vec4(offset, 1.0);
    
    return ray;
}

// Provided by Dan Buckstein
// Modified by Ian Melvin based on work by Peter Shirley (Link in header)
// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;
    
    camera cam;
    
    //Antialiasing
    const float samples_per_pixel = 100.0;
    
    //sphere info
    sphere spr1;
    sphere spr2;
    sphere spr3;
    sphere spr4;
    
    spr1.center = vec3(0.0, 0.0, -1.0);
    spr2.center = vec3(0.0, -100.5, -1.0);
    spr3.center = vec3(-1.0, 0.0, -1.0);
    spr4.center = vec3(1.0, 0.0, -1.0);
    
    spr1.radius = 0.5;
    spr2.radius = 100.0;
    spr3.radius = 0.5;
    spr4.radius = 0.5;
    
    
    spr1.material.mat = 1.0;
    spr1.material.color = vec4(0.5, 0.3, 0.8, 1.0);
    spr1.material.fuzz = 0.0;
    spr2.material.mat = 1.0;
    spr2.material.color = vec4(0.8, 0.8, 0.0, 1.0);
    spr2.material.fuzz = 0.0;
    spr3.material.mat = 2.0;
    spr3.material.color = vec4(0.8, 0.8, 0.8, 1.0);
    spr3.material.fuzz = 0.0;
    spr4.material.mat = 2.0;
    spr4.material.color = vec4(0.8, 0.4, 0.2, 1.0);
    spr4.material.fuzz = 0.3;
    
	//sphere array
    sphere sphereArray[4] = sphere[4](spr1, spr2, spr3, spr4);

    // ray
    vec4 rayDirection, rayOrigin;
    rRay ray;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(ray, viewport, focalLength);
    
    float dist = sqrt(lengthSquared(spr2.center - vec3(0.0, 1.0, 0.0)));
    
   	//set_cam(cam, ray.rayOrigin, aspect*viewportHeight, viewportHeight, focalLength);
    set_cam(cam, vec4(3.0,3.0,2.0, 1.0), spr2.center, vec3(0.0, 1.0, 0.0), 20.0, aspect, dist);
    
    //declare vector 3
    vec4 mixed;
	
    //loop to collect 
    for(float i = 0.0; i < samples_per_pixel; i++)
    {
        float u = (fragCoord.x + randomFloat(fragCoord)) / ((viewportHeight * aspect) - 1.0);
        float v = (fragCoord.x + randomFloat(fragCoord)) / (viewportHeight - 1.0);
        //ray = getRay(cam, u, v, 2.0, fragCoord);
        calcRay(ray, viewport, focalLength);
        
        mixed += calcColor(ray, sphereArray, uv, fragCoord);
    }
    
    float scale = 1.0 / samples_per_pixel;
    
    mixed.x = clamp(mixed.x *= scale, 0.0, 0.999);
    mixed.y = clamp(mixed.y *= scale, 0.0, 0.999);
	mixed.z = clamp(mixed.z *= scale, 0.0, 0.999);

    // color
    fragColor = mixed;
}