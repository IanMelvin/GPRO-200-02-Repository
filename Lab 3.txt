/*
	Ian Melvin
	Lab 3
	Purpose: Recreate chapters 4-7 from Peter Shirley's Ray Tracing in one weekend
		https://raytracing.github.io/books/RayTracingInOneWeekend.html#rays,asimplecamera,andbackground

*/

struct hit_record{
  	vec3 point;
    vec3 normal;
    float temp;
    bool front_face;
};
    
struct sphere{
	vec3 center;
    float radius;
};

void set_face_normal(vec4 rayDirection, vec4 rayOrigin, vec3 outward_normal, hit_record rec)
{
    rec.front_face = dot(rayDirection.xyz, outward_normal) < 0.0;
    if(rec.front_face)
    {
        rec.normal = outward_normal;
    }
    else 
    {
     	rec.normal = -outward_normal;   
    }    
    
}


// Provided by Dan Buckstein
// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// Provided by Dan Buckstein
// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}

//Takes in a vector and returns the vector divided by its length
vec4 unit_vector(in vec4 vector)
{
 	   return vector/length(vector);
}

vec3 unit_vector(in vec3 vector)
{
 	   return vector/length(vector);
}

//Provided by Dan Buckstein during class
//preforms the dot product on a vec3
float lengthSquared(in vec3 x)
{
    return dot(x,x);
}

//Provided by Dan Buckstein during class
//preforms the dot product on a vec4
float lengthSquared(in vec4 x)
{
    return dot(x,x);
}

//Might need to tweak vec#'s either move to vec3's or vec4's
bool hit(vec3 center, float radius, vec4 rayDirection, vec4 rayOrigin, float t_max, float t_min, hit_record rec)
{
	vec3 originToCenter =  rayOrigin.xyz - center;
    float len2 = lengthSquared(rayDirection);
    float component = dot(originToCenter, rayDirection.xyz);
    float ocMinusRadSqred = lengthSquared(originToCenter) - radius*radius;
    float discriminant = component*component - len2*ocMinusRadSqred;
    if(discriminant > 0.0)
    {
        float root = sqrt(discriminant);
        	
        float temp = (-component - root) / len2;
         
        if(temp < t_max && temp > t_min)
        {
         	rec.temp = temp;
            rec.point = rayOrigin.xyz + ( rec.temp * rayDirection.xyz );
            vec3 outward_normal = (rec.point - center) / radius;
            set_face_normal(rayDirection, rayOrigin, outward_normal, rec);
            
            return true;
        }
        
        temp = (-component + root) / len2;
        if(temp < t_max && temp > t_min)
        {
         	rec.temp = temp;
            rec.point = rayOrigin.xyz + ( rec.temp * rayDirection.xyz );
            vec3 outward_normal = (rec.point - center) / radius;
            set_face_normal(rayDirection, rayOrigin, outward_normal, rec);
            
            return true;
        }
    }
    
    return false;
    
}

//Takes in a vec3, a float, and two vec4s and returns a true or false value
float hit_circle(vec3 center, float radius, vec4 rayDirection, vec4 rayOrigin)
{
    vec3 originToCenter =  rayOrigin.xyz - center;
    float len2 = lengthSquared(rayDirection);
    float component = dot(originToCenter, rayDirection.xyz);
    float ocMinusRadSqred = lengthSquared(originToCenter) - radius*radius;
    float discriminant = component*component - len2*ocMinusRadSqred;
    if(discriminant < 0.0)
    {
      return -1.0;
    }
    else
    {
      return (-component - sqrt(discriminant)) / (len2);
    }
    
}

// Base Function by Dan Buckstein
// Modified by Ian Melvin based on work by Peter Shirley (Link in header)
// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    float hit = hit_circle(vec3(0.0, 0.0, -1.0), 0.5, rayDirection, rayOrigin);
    if(hit > 0.0)
    {
        vec3 store = unit_vector(rayOrigin.xyz + (hit * rayDirection.xyz));
     	return vec4(0.5*(store.x + 1.0),0.5*(store.y + 1.0), 0.5*(store.z + 1.0), 1.0); 
    }
    
    vec4 unitDirection = unit_vector(rayDirection);
    
    hit = 0.5 * (unitDirection.y + 1.0);
   
    return mix(vec4(1.0), vec4(0.5, 0.7, 1.0, 1.0), hit);
}


// Provided by Dan Buckstein
// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);

    // color
    fragColor = calcColor(rayDirection, rayOrigin);

    // TEST COLOR:
    //  -> what do the other things calculated above look like?
    //fragColor = vec4(viewport, 0.0, 0.0);
    //fragColor = vec4(ndc, 0.0, 0.0);
    //fragColor = vec4(uv, 0.0, 0.0);
}