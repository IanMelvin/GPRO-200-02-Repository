/*
	Ian Melvin
	Lab 3
	Purpose: Recreate chapters 4-7 from Peter Shirley's Ray Tracing in one weekend
		https://raytracing.github.io/books/RayTracingInOneWeekend.html#rays,asimplecamera,andbackground

*/

//Declaration of struct
//inspired on hit_record from Peter Shirley (Link in header)
struct hit_record{
  	vec3 point;
    vec3 normal;
    float temp;
    bool front_face;
};

//Declaration of struct
//inspired on sphere class from Peter Shirley (Link in header)
struct sphere{
	vec3 center;
    float radius;
};

//Declaration of struct
//inspired on camera class from Peter Shirley (Link in header)
struct camera{
    vec3 horizontal;
    vec3 vertical;
    vec3 lower_left_corner;
};
   
//takes in two vec4, a vec3 and a hit_record and outs a modified hit_record
//based on work by Peter Shirley (Link in header)
void set_face_normal(vec4 rayDirection, vec4 rayOrigin, vec3 outward_normal, out hit_record rec)
{
    rec.front_face = dot(rayDirection.xyz, outward_normal) < 0.0;
    if(rec.front_face)
    {
        rec.normal = outward_normal;
    }
    else 
    {
     	rec.normal = -outward_normal;   
    }    
    
}

//takes in a camera, a vec4, and 3 floats and outs a modified camera
//based on work by Peter Shirley (Link in header)
void set_cam(out camera cam, vec4 origin, float viewportWidth, float viewportHeight, float focal_length)
{
 	cam.horizontal = vec3(viewportWidth, 0.0, 0.0);
    cam.vertical = vec3(0.0, viewportHeight, 0.0);
    cam.lower_left_corner = origin.xyz - cam.horizontal/2.0 - cam.vertical/2.0 - vec3(0.0, 0.0, focal_length);
    
}

// Provided by Dan Buckstein
// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// Provided by Dan Buckstein
// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}

//Takes in a vec4 and returns the vector divided by its length
vec4 unit_vector(in vec4 vector)
{
 	   return vector / length(vector);
}

//Takes in a vec3 and returns the vector divided by its length
vec3 unit_vector(in vec3 vector)
{
 	   return vector / length(vector);
}

//Provided by Dan Buckstein during class
//preforms the dot product on a vec3
float lengthSquared(in vec3 x)
{
    return dot(x,x);
}

//Provided by Dan Buckstein during class
//preforms the dot product on a vec4
float lengthSquared(in vec4 x)
{
    return dot(x,x);
}

//Takes in a vec3, two vec4s, three floats, and a hit_record and returns a boolean and outs a hit_record
//Determines if a sphere is hit
//based on work by Peter Shirley (Link in header)
bool hit(vec3 center, float radius, vec4 rayDirection, vec4 rayOrigin, float t_max, float t_min, out hit_record rec)
{
	vec3 originToCenter =  rayOrigin.xyz - center;
    float len2 = lengthSquared(rayDirection);
    float component = dot(originToCenter, rayDirection.xyz);
    float ocMinusRadSqred = lengthSquared(originToCenter) - radius*radius;
    float discriminant = component*component - len2*ocMinusRadSqred;
    if(discriminant > 0.0)
    {
        float root = sqrt(discriminant);
        	
        float temp = (-component - root) / len2;
         
        if(temp < t_max && temp > t_min)
        {
         	rec.temp = temp;
            rec.point = rayOrigin.xyz + ( rec.temp * rayDirection.xyz );
            vec3 outward_normal = (rec.point - center) / radius;
            set_face_normal(rayDirection, rayOrigin, outward_normal, rec);
            
            return true;
        }
        
        temp = (-component + root) / len2;
        if(temp < t_max && temp > t_min)
        {
         	rec.temp = temp;
            rec.point = rayOrigin.xyz + ( rec.temp * rayDirection.xyz );
            vec3 outward_normal = (rec.point - center) / radius;
            set_face_normal(rayDirection, rayOrigin, outward_normal, rec);
            
            return true;
        }
    }
    
    return false;
    
}

//Takes in two vec4s, two floats and a sphere. Returns a bool, and outs a hit_record and a float
//based on work by Peter Shirley (Link in header)
bool hittable(vec4 rayDirection, vec4 rayOrigin, out float t_max, float t_min, out hit_record rec, sphere spr)
{
    hit_record temp_rec;
    bool hit_anything = false; 
    
    if(hit(spr.center, spr.radius, rayDirection, rayOrigin, t_max, t_min, temp_rec))
    {
      	hit_anything = true;
        t_max = temp_rec.temp;
        rec = temp_rec;
    }
    
    return hit_anything;
}

// Base Function by Dan Buckstein
// Modified by Ian Melvin based on work by Peter Shirley (Link in header)
// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin, in sphere sphereArray[2])
{
    hit_record rec;
    float t_max = 1.0 / 0.0; 
    
    bool store = hittable(rayDirection, rayOrigin, t_max, 0.0, rec, sphereArray[0]);
    bool store2 = hittable(rayDirection, rayOrigin, t_max, 0.0, rec, sphereArray[1]);
    
    if(store || store2)
    {
     	return 0.5 *(vec4(rec.normal, 1.0) + vec4(1.0));   
    }
    
    vec4 unitDirection = unit_vector(rayDirection);
    
    float hit = 0.5 * (unitDirection.y + 1.0);
    
    return mix(vec4(1.0), vec4(0.5, 0.7, 1.0, 1.0), hit);
}

//Based of of code given by https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
float randomFloat(vec2 seed)
{
    return fract(sin(dot(seed.xy, vec2(12.9898, 78.233))) * 43758.5453);
}


// Provided by Dan Buckstein
// Modified by Ian Melvin based on work by Peter Shirley (Link in header)
// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;
    
    camera cam;
    
    //Antialiasing
    const float samples_per_pixel = 100.0;
    
    //sphere info
    sphere spr1;
    sphere spr2;
    
    spr1.center = vec3(0.0, 0.0, -1.0);
    spr2.center = vec3(0.0, -100.5, -1.0);
    
    spr1.radius = 0.5;
    spr2.radius = 100.0;
    
	//sphere array
    sphere sphereArray[2] = sphere[2](spr1, spr2);

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);
    
   	set_cam(cam, rayOrigin, aspect*viewportHeight, viewportHeight, focalLength);
    
    //declare vector 3
    vec4 mixed;
	
    //loop to collect 
    for(float i = 0.0; i < samples_per_pixel; i++)
    {
        float u = (fragCoord.x + randomFloat(fragCoord)) / ((viewportHeight * aspect) - 1.0);
        float v = (fragCoord.x + randomFloat(fragCoord)) / (viewportHeight - 1.0);
        rayDirection = vec4(cam.lower_left_corner + u * cam.horizontal + v * cam.vertical, 0.0) - rayOrigin;
        calcRay(rayDirection, rayOrigin, viewport, focalLength);
        
        mixed += calcColor(rayDirection, rayOrigin, sphereArray);
        
    }
    
    float scale = 1.0 / samples_per_pixel;
    
    //vec4 mixed = calcColor(rayDirection, rayOrigin, sphereArray);
    
    mixed.x = clamp(mixed.x *= scale, 0.0, 0.999);
    mixed.y = clamp(mixed.y *= scale, 0.0, 0.999);
	mixed.z = clamp(mixed.z *= scale, 0.0, 0.999);

    // color
    fragColor = mixed;
}