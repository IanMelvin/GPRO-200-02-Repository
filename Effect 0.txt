/*
	Ian Melvin
	Effect 0
	Purpose: To create a static gradient in Shadertoy
	Based off of work shown by Daniel Buckstein

*/

//Takes in two vec2, calculates the Red and Green values of the returning color by dividing the coordinates with the screen resolution
vec4 gradiant(in vec2 fragCoord, in vec2 resolution)
{
    vec2 uv = fragCoord / resolution;
    return vec4(uv, 0.0, 1.0);
    
    //vec3 color = vec3(uv, 0.25);
    //float alpha = 1.0;
    // return vec4(color, alpha);
    
    //Old code exapmples/tests based off work shown by Dan Buckstein
    //return vec4(1.0, 0.0, 0.0, 1.0);
    
    // R is horizonal 
    // G -> vert
    // B?
    // A?
    //return vec4(fragCoord, 0.0, 1);
    
    // red and blue chanel - >horizontal
    // green and a -> vert
    
    //return vec4(fragCoord, fragCoord);
    
    
    //flipped finalized
    //vec2 uv = fragCoord / iResolution.xy;
    //return vec4(0.0, uv, 1.0);
    
    
    // finalized: red-green gradient
    
}


//calls function to determine the color of the pixels and returns them to the screen
void gradiant( out vec4 fragColor, in vec2 fragCoord )
{
    fragColor = myEffect0(fragCoord, iResolution.xy);
    
    
    //Old Code Versions and tests based off work shown by Dan Buckstein
    // R, G, B, A [0,1]
    //fragColor = vec4(1.0, 1.0, 1.0, 1.0);
    // Normalized pixel coordinates (from 0 to 1)
    //vec2 uv = fragCoord/iResolution.xy;

    // Time varying pixel color
    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));

    // Output to screen
    //fragColor = vec4(col,1.0);
}