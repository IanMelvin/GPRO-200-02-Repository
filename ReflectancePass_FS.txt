#version 330
//ReflectancePass
//Ian Melvin
//Based on work from labs 7 & 8
//Also inspired by work done by https://www.shadertoy.com/view/lsXGzf
//and information provided by https://shadered.org/docs/objects.html?highlight=keyboard
layout (location = 0) out vec4 rtFragCoord;

in vec4 color;
in vec2 uv;

in vec4 vNormal;
in vec4 vTexcoord;
in vec4 vColor;
in vec4 vPos;

struct light
{
	vec4 lightPosition;
	vec3 diffuseReflectivity;
	vec3 lightIntensity;
};

in light vLight;

uniform sampler2D uTex, uKeyMap;
uniform int KEY_UP = 38;
uniform int KEY_DOWN = 40;

float maxDotProd(vec3 vector1, vec3 vector2)
{
	return max(dot(vector1,vector2), 0.0);
}

vec3 lightIng(vec4 light_view, vec3 lInt, vec3 DiffRef, vec3 norm_cam, vec4 eyeCoord)
{
	vec3 normDist = normalize(vec3(light_view-eyeCoord));
	return lInt * DiffRef * maxDotProd(normDist, norm_cam);
}

void main() {
	texelFetch(uKeyMap, ivec2(KEY_UP, 0), 0).x;
	
	rtFragCoord = vec4(1.0);
	
	//vec3 newIntensity = vLight.lightIntensity * y.xyz;
	
	vec4 noiseVec = texture(uTex, vTexcoord.xy);
	
	vec3 preColor = noiseVec.xyz * lightIng(vPos, vLight.lightIntensity, vLight.diffuseReflectivity, vNormal.xyz, vColor);
   	rtFragCoord = vec4(preColor, 1.0) * texelFetch(uKeyMap, ivec2(KEY_UP, 2), 0).x;

	vec3 col = vec3(0.0);
	col = mix( col, vec3(0.0,0.0,1.0),
        (1.0-smoothstep(0.0,0.01,abs(length(1.0-vec2(0.0,-0.5))-0.3)))*
        texelFetch( uKeyMap, ivec2(KEY_DOWN,2),0 ).x);
    rtFragCoord = vec4(col, 1.0);
}